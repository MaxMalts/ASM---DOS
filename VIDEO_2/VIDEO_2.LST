Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 1
video_2.asm



      1				     ; This program outputs a message in border	to the screen
      2				     ; via the video memory. You can adjust the	values
      3				     ; under "User entered data" comment and message under Message variable
      4
      5
      6
      7	0000			     .model tiny
      8	0000			     .code
      9				     org 100h
     10
     11	0100			     Start:
     12	      =000A			     CR	     equ 10d
     13	      =000D			     LF	     equ 13d
     14	      =	CR, LF			     CRLF    equ CR, LF
     15
     16						     ; User entered data:
     17	      =0050				     scrWidth	     equ 80d
     18
     19	      =001E				     msgBegX	     equ 30d
     20	      =0008				     msgBegY	     equ 8d
     21
     22	      =0019				     bordBegX	     equ 25d
     23	      =0006				     bordBegY	     equ 6d
     24
     25						     ; Characters for border:
     26	      =00C9				     leftTopBord     equ 0C9h
     27	      =00C8				     leftBottomBord  equ 0C8h
     28	      =00BB				     rightTopBord    equ 0BBh
     29	      =00BC				     rightBottomBord equ 0BCh
     30	      =00BA				     LeftBord	     equ 0BAh
     31	      =00BA				     RightBord	     equ 0BAh
     32	      =00CD				     TopBord	     equ 0CDh
     33	      =00CD				     BottomBord	     equ 0CDh
     34
     35
     36
     37	0100  B8 B800			     mov ax, 0B800h	     ; Video memory
     38	0103  8E C0			     mov es, ax
     39
     40
     41					     ; Printing	message:
     42	0105  BB 0000r			     mov bx, offset Message		     ; Current character address
     43	0108  BE 053C			     mov si, (scrWidth*msgBegY+msgBegX)*2d   ; Video position
     44	010B  B2 00			     mov dl, 0				     ; Message wigth
     45	010D  B6 01			     mov dh, 1				     ; Message height
     46	010F  B9 0000			     mov cx, 0				     ; For loop
     47	0112				     Message_loop:
     48	0112  80 3F 0A				     cmp byte ptr [bx],	CR
     49	0115  75 27				     jne if_not_CR
     50	0117  B0 08					     mov al, msgBegY
     51	0119  02 C6					     add al, dh
     52	011B  B4 50					     mov ah, scrWidth
     53	011D  F6 E4					     mul ah
     54	011F  05 001E					     add ax, msgBegX
     55	0122  03 C0					     add ax, ax
     56	0124  8B F0					     mov si, ax
     57
Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 2
video_2.asm



     58	0126  FE C6					     inc dh
     59	0128  83 C3 02					     add bx, 2
     60
     61	012B  38 16 0067r				     cmp curLineWidth, dl
     62	012F  76 04					     jna if_not_CurMoreMax
     63	0131  8A 16 0067r					     mov dl, curLineWidth
     64	0135						     if_not_CurMoreMax:
     65
     66	0135  C6 06 0067r 00 90				     mov curLineWidth, 0
     67	013B  EB 0E 90					     jmp end_if_CR
     68	013E					     if_not_CR:
     69	013E  8A 27					     mov ah, [bx]
     70	0140  26: 88 24					     mov es:[si], ah ; Print current character
     71	0143  FE 06 0067r				     inc curLineWidth
     72
     73	0147  83 C6 02					     add si, 2d
     74	014A  43					     inc bx
     75	014B					     end_if_CR:
     76
     77	014B  8A 2F				     mov ch, [bx]
     78	014D  80 ED 24				     sub ch, '$'
     79	0150  E0 C0				     loopnz Message_loop
     80
     81	0152  38 16 0067r		     cmp curLineWidth, dl
     82	0156  76 04			     jna if_not_CurMoreMax2
     83	0158  8A 16 0067r			     mov dl, curLineWidth
     84	015C				     if_not_CurMoreMax2:
     85
     86	015C  88 16 0065r		     mov msgWidth, dl	     ; Saving message width
     87	0160  88 36 0066r		     mov msgHeight, dh	     ; Saving message height
     88
     89
     90					     ; Generating border:
     91					     ; Calculating corners positions:
     92					     ; bottom left corner:
     93	0164  B7 19			     mov bh, bordBegX				     ; x axis
     94	0166  B3 09			     mov bl, bordBegY+(msgBegY-bordBegY)*2d-1d	     ; y axis
     95	0168  02 1E 0066r		     add bl, msgHeight
     96
     97	016C  B9 0000			     mov cx, 0	     ; cl - temp bl or bh, to add to ax
     98
     99	016F  B0 50			     mov al, scrWidth	     ; ax - current corner position
    100	0171  F6 E3			     mul bl
    101	0173  8A CF			     mov cl, bh
    102	0175  03 C1			     add ax, cx
    103	0177  03 C0			     add ax, ax
    104	0179  A3 006Ar			     mov leftBottomCorner, ax
    105
    106					     ; bottom right corner:
    107	017C  B7 22			     mov bh, bordBegX+(msgBegX-bordBegX)*2d-1d
    108	017E  02 3E 0065r		     add bh, msgWidth
    109
    110	0182  B0 50			     mov al, scrWidth	     ; ax - current corner position
    111	0184  F6 E3			     mul bl
    112	0186  8A CF			     mov cl, bh
    113	0188  03 C1			     add ax, cx
    114	018A  03 C0			     add ax, ax
Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 3
video_2.asm



    115	018C  A3 006Er			     mov rightBottomCorner, ax
    116
    117					     ; top right corner:
    118	018F  B3 06			     mov bl, bordBegY
    119
    120	0191  B0 50			     mov al, scrWidth	     ; ax - current corner position
    121	0193  F6 E3			     mul bl
    122	0195  8A CF			     mov cl, bh
    123	0197  03 C1			     add ax, cx
    124	0199  03 C0			     add ax, ax
    125	019B  A3 006Cr			     mov rightTopCorner, ax
    126
    127
    128					     ; Printing	corner:
    129					     ; Top left	to right:
    130	019E  8B 36 0068r		     mov si, leftTopCorner	  ; Current cursor position
    131
    132	01A2  26: C6 04	C9		     mov byte ptr es:[si], leftTopBord	     ; Printing	top left corner
    133	01A6  83 C6 02			     add si, 2d
    134
    135	01A9  B9 0000			     mov cx, 0	     ; For loop
    136	01AC				     TopLeftToRight_loop:
    137	01AC  26: C6 04	CD			     mov byte ptr es:[si], topBord
    138	01B0  83 C6 02				     add si, 2d
    139
    140	01B3  8B CE				     mov cx, si
    141	01B5  2B 0E 006Cr			     sub cx, rightTopCorner
    142	01B9  E0 F1				     loopnz TopLefttoRight_loop
    143
    144	01BB  26: C6 04	BB		     mov byte ptr es:[si], rightTopBord	      ;	Printing top right corner
    145	01BF  81 C6 00A0		     add si, scrWidth*2d
    146
    147	01C3  B9 0000			     mov cx, 0	     ; For loop
    148	01C6				     TopToBottomRight_loop:
    149	01C6  26: C6 04	BA			     mov byte ptr es:[si], rightBord
    150	01CA  81 C6 00A0			     add si, scrWidth*2d
    151
    152	01CE  8B CE				     mov cx, si
    153	01D0  2B 0E 006Er			     sub cx, rightBottomCorner
    154	01D4  E0 F0				     loopnz TopToBottomRight_loop
    155
    156	01D6  26: C6 04	BC		     mov byte ptr es:[si], rightBottomBord	 ; Printing bottom right corner
    157	01DA  83 EE 02			     sub si, 2d
    158
    159	01DD  B9 0000			     mov cx, 0	     ; For loop
    160	01E0				     BottomRightToLeft_loop:
    161	01E0  26: C6 04	CD			     mov byte ptr es:[si], bottomBord
    162	01E4  83 EE 02				     sub si, 2d
    163
    164	01E7  8B CE				     mov cx, si
    165	01E9  2B 0E 006Ar			     sub cx, leftBottomCorner
    166	01ED  E0 F1				     loopnz BottomRightToLeft_loop
    167
    168	01EF  26: C6 04	C8		     mov byte ptr es:[si], leftBottomBord	; Printing bottom left corner
    169	01F3  81 EE 00A0		     sub si, scrWidth*2d
    170
    171	01F7  B9 0000			     mov cx, 0	     ; For loop
Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 4
video_2.asm



    172	01FA				     BottomToTopLeft_loop:
    173	01FA  26: C6 04	BA			     mov byte ptr es:[si], leftBord
    174	01FE  81 EE 00A0			     sub si, scrWidth*2d
    175
    176	0202  8B CE				     mov cx, si
    177	0204  2B 0E 0068r			     sub cx, leftTopCorner
    178	0208  E0 F0				     loopnz BottomToTopLeft_loop
    179
    180
    181	020A  B8 4C00			     mov ax, 4C00h   ; Exiting
    182	020D  CD 21			     int 21h
    183
    184
    185
    186	020F				     .data
    187	0000  48 65 6C 6C 6F 21	0A+	     Message db	'Hello!', CRLF,	\
    188	      0D 54 68 69 73 20	69+		     'This is the message', CRLF, \
    189	      73 20 74 68 65 20	6D+		     'that was drawn directly via', CRLF, \
    190	      65 73 73 61 67 65	0A+		     'the video	memory.	alalalaalalallaalalalala$'
    191	      0D 74 68 61 74 20	77+
    192	      61 73 20 64 72 61	77+
    193	      6E 20 64 69 72 65	63+
    194	      74 6C 79 20 76 69	61+
    195	      0A 0D 74 68 65 20	76+
    196	      69 64 65 6F 20 6D	65+
    197	      6D 6F 72 79 2E 20	61+
    198	      6C 61 6C 61 6C 61	61+
    199	      6C 61 6C 61 6C 6C	61+
    200	      61 6C 61 6C 61 6C	61+
    201	      6C 61 24
    202
    203					     ; Technical variables
    204	0065  00			     msgWidth db 0
    205	0066  00			     msgHeight db 0
    206
    207	0067  00			     curLineWidth db 0
    208
    209	0068  03F2			     leftTopCorner dw (scrWidth*bordBegY+BordBegX)*2d
    210	006A  0000			     leftBottomCorner dw 0
    211	006C  0000			     rightTopCorner dw 0
    212	006E  0000			     rightBottomCorner dw 0
    213
    214				     end Start
Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/16/20"
??FILENAME			  Text	 "video_2 "
??TIME				  Text	 "17:20:35"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 VIDEO_2
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BORDBEGX			  Number 0019
BORDBEGY			  Number 0006
BOTTOMBORD			  Number 00CD
BOTTOMRIGHTTOLEFT_LOOP		  Near	 DGROUP:01E0
BOTTOMTOTOPLEFT_LOOP		  Near	 DGROUP:01FA
CR				  Number 000A
CRLF				  Text	 CR, LF
CURLINEWIDTH			  Byte	 DGROUP:0067
END_IF_CR			  Near	 DGROUP:014B
IF_NOT_CR			  Near	 DGROUP:013E
IF_NOT_CURMOREMAX		  Near	 DGROUP:0135
IF_NOT_CURMOREMAX2		  Near	 DGROUP:015C
LEFTBORD			  Number 00BA
LEFTBOTTOMBORD			  Number 00C8
LEFTBOTTOMCORNER		  Word	 DGROUP:006A
LEFTTOPBORD			  Number 00C9
LEFTTOPCORNER			  Word	 DGROUP:0068
LF				  Number 000D
MESSAGE				  Byte	 DGROUP:0000
MESSAGE_LOOP			  Near	 DGROUP:0112
MSGBEGX				  Number 001E
MSGBEGY				  Number 0008
MSGHEIGHT			  Byte	 DGROUP:0066
MSGWIDTH			  Byte	 DGROUP:0065
RIGHTBORD			  Number 00BA
RIGHTBOTTOMBORD			  Number 00BC
RIGHTBOTTOMCORNER		  Word	 DGROUP:006E
RIGHTTOPBORD			  Number 00BB
RIGHTTOPCORNER			  Word	 DGROUP:006C
SCRWIDTH			  Number 0050
START				  Near	 DGROUP:0100
TOPBORD				  Number 00CD
TOPLEFTTORIGHT_LOOP		  Near	 DGROUP:01AC
TOPTOBOTTOMRIGHT_LOOP		  Near	 DGROUP:01C6
Turbo Assembler	 Version 4.1	    02/16/20 17:20:35	    Page 6
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0070 Word	  Public  DATA
  _TEXT				  16  020F Word	  Public  CODE
