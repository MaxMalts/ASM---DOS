Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 1
hack.asm



      1				     ; This program requests a password	and checks it.
      2				     ; If it's correct program allows access to	the function.
      3				     ; Uses hash for passwords.	If they	match then passsword
      4				     ; is correct.
      5				     ; To store	the password linked list is used. i-th element is
      6				     ; the t-th	letter information. First byte of it is	the i-th
      7				     ; letter and the next 4 bytes are the offset to the next element.
      8				     ; Password	terminates with	('$', 0). All list elements are	spread in data.
      9
     10				     locals @@
     11
     12	0000			     .model tiny
     13
     14	      =000D		     CR	     equ 0dH
     15	      =000A		     LF	     equ 0aH
     16
     17	0000			     .code
     18				     org 100H
     19	0100			     Start:
     20	0100  8C C8			     mov ax, cs
     21	0102  8E D8			     mov ds, ax
     22	0104  BA 0003r			     mov dx, offset askPassword
     23	0107  E8 005A			     call Puts
     24
     25	010A  8C C8			     mov ax, cs
     26	010C  8E C0			     mov es, ax
     27	010E  BF 0014r			     mov di, offset usrInput
     28	0111  B9 0014 90		     mov cx, INPUT_LENGTH
     29	0115  E8 0030			     call Gets
     30
     31					     ; es already set
     32	0118  BF 000Er			     mov di, offset pLtr_1
     33	011B  E8 0050			     call calcListHash
     34	011E  50			     push ax
     35
     36					     ; es already set
     37	011F  BF 0014r			     mov di, offset usrInput
     38	0122  E8 0061			     call calcBufHash	     ; in ax is	input hash now
     39
     40	0125  5B			     pop bx  ; Password	hash
     41	0126  3B C3			     cmp ax, bx
     42	0128  74 09			     je	@@correct
     43	012A  F6 16 002Er			     not passwordCorrect     ; passwordCorrect = !passwordCorrect
     44	012E  80 26 002Er 01			     and passwordCorrect, 1
     45	0133				     @@correct:
     46
     47	0133  80 3E 002Er 00		     cmp passwordCorrect, 0
     48	0138  74 06			     je	@@if_not_correct
     49	013A  E8 005E				     call AllowAccess
     50	013D  EB 04 90				     jmp @@end_if_correct
     51	0140				     @@if_not_correct:
     52	0140  E8 0063				     call DenyAccess
     53	0143				     @@end_if_correct:
     54
     55	0143  B8 4C00			     mov ax, 4c00H
     56	0146  CD 21			     int 21H
     57
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 2
hack.asm



     58	0148			     .data
     59	0000  75		     pLtr_2	     db	'u'
     60	0001  0028r				     dw	offset pLtr_3
     61
     62	0003  50 61 73 73 77 6F	72+  askPassword     db	'Password: ', '$'
     63	      64 3A 20 24
     64
     65	000E  6D		     pLtr_1	     db	'm'  ; First letter of password
     66	000F  0000r				     dw	offset pLtr_2
     67
     68	0011  24		     pLtr_8	     db	'$'
     69	0012  0000				     dw	0
     70
     71	      =0014		     INPUT_LENGTH    equ 20
     72	0014  14*(00)		     usrInput	     db	INPUT_LENGTH dup(0)
     73
     74	0028  72		     pLtr_3	     db	'r'
     75	0029  002Br				     dw	offset pLtr_4
     76
     77	002B  20		     pLtr_4	     db	' '
     78	002C  002Fr				     dw	offset pLtr_5
     79
     80	002E  01		     passwordCorrect db	1
     81
     82
     83	002F			     .code
     84				     ; Reads a string from input
     85				     ; Input:	     es:di - buffer address (be	careful	with size)
     86				     ;		     cx	- buffer size
     87				     ; Output:	     In	buffer
     88				     ; Destroy:	     ax, cx, di
     89	0148			     Gets    proc
     90	      =0008			     CHAR_INPUT	     equ 08H
     91
     92	0148				     @@input_loop:
     93	0148  B4 08				     mov ah, CHAR_INPUT
     94	014A  CD 21				     int 21H
     95
     96	014C  3C 0D				     cmp al, CR
     97	014E  74 10				     je	@@noOverflow
     98	0150  3C 0A				     cmp al, LF
     99	0152  74 0C				     je	@@noOverflow
    100	0154  3C 24				     cmp al, '$'
    101	0156  74 08				     je	@@noOverflow
    102	0158  3C 00				     cmp al, 0
    103	015A  74 04				     je	@@noOverflow
    104
    105	015C  AA				     stosb
    106
    107	015D  E2 E9				     loop @@input_loop
    108	015F  4F				     dec di  ; Overflow	so need	place for '$'
    109
    110	0160				     @@noOverflow:
    111	0160  B0 24			     mov al, '$'
    112	0162  AA			     stosb
    113
    114	0163  C3			     ret
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 3
hack.asm



    115	0164				     Gets    endp
    116
    117
    118				     ; Prints '$' - terminated string to console
    119				     ; Input:	     di:dx - string address
    120				     ; Output:	     In	console
    121				     ; Destroy:	     ah
    122	0164			     Puts    proc
    123	      =0009			     STRING_OUTPUT   equ 09H
    124
    125	0164  B4 09			     mov ah, STRING_OUTPUT
    126	0166  CD 21			     int 21H
    127
    128	0168  C3			     ret
    129	0169				     Puts    endp
    130
    131
    132				     ; Formula for hash
    133				     ; Input:	     ax	- current hash
    134				     ;		     bx	- current value
    135				     ; Output:	     ax	- new hash
    136				     ; Destroy:
    137	0169			     HashFormula     proc
    138	0169  D1 E0			     shl ax, 1
    139	016B  03 C3			     add ax, bx
    140
    141	016D  C3			     ret
    142	016E				     HashFormula     endp
    143
    144
    145
    146				     ; Calculates hash of list elements	(must be '$'-terminated,
    147				     ; '$' isn't calculated in hash)
    148				     ; Input:	     es:di first element address
    149				     ; Output:	     ax	- calculated hash
    150				     ; Destroy:	     bx, di
    151	016E			     CalcListHash    proc
    152	016E  33 C0			     xor ax, ax
    153	0170  26: 8A 1D			     mov bl, es:[di]
    154	0173				     @@calculate_loop:
    155	0173  80 FB 24				     cmp bl, '$'
    156	0176  74 0D				     je	@@end_calculate_loop
    157
    158	0178  B7 00				     mov bh, 0
    159	017A  E8 FFEC				     call HashFormula
    160
    161	017D  47				     inc di
    162	017E  26: 8B 3D				     mov di, es:[di]
    163	0181  8A 1D				     mov bl, [di]
    164
    165	0183  EB EE				     jmp @@calculate_loop
    166	0185					     @@end_calculate_loop:
    167
    168	0185  C3			     ret
    169	0186				     CalcListHash    endp
    170
    171
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 4
hack.asm



    172				     ; Calculate hash of a buffer (must	be '$'-terminated,
    173				     ; '$' isn't calculated in hash)
    174				     ; Input:	     es:di buffer address
    175				     ; Output:	     ax	- calculated hash
    176				     ; Destroy:	     bx, di
    177	0186			     CalcBufHash     proc
    178	0186  33 C0			     xor ax, ax
    179	0188  26: 8A 1D			     mov bl, es:[di]
    180	018B				     @@calculate_loop:
    181	018B  80 FB 24				     cmp bl, '$'
    182	018E  74 0A				     je	@@end_calculate_loop
    183
    184	0190  B7 00				     mov bh, 0
    185	0192  E8 FFD4				     call HashFormula
    186
    187	0195  47				     inc di
    188	0196  8A 1D				     mov bl, [di]
    189
    190	0198  EB F1				     jmp @@calculate_loop
    191	019A					     @@end_calculate_loop:
    192
    193	019A  C3			     ret
    194	019B				     CalcBufHash    endp
    195
    196
    197
    198				     ; Input:	     ds:si - password
    199				     ;		     es:di - user input
    200				     ; Output:	     ah	- 1: password correct, 0: password incorrect
    201				     ; Destroy:	     si, di, cx
    202				     ;CheckPassword   proc
    203				     ;	      call Strcmp
    204				     ;
    205				     ;	      jne @@if_not_correct
    206				     ;		      mov ah, 1
    207				     ;		      jmp @@end_if_correct
    208				     ;	      @@if_not_correct:
    209				     ;		      mov ah, 0
    210				     ;	      @@end_if_correct:
    211				     ;
    212				     ;	      ret
    213				     ;	      CheckPassword   endp
    214
    215
    216				     ; Represents a function that will be called
    217				     ; if passsword is correct,	prints 'Access allowed'
    218				     ; Input:	     -
    219				     ; Output:	     In	console
    220				     ; Destroy:	     ax, dx, ds
    221	019B			     AllowAccess    proc
    222
    223	019B  8C C8			     mov ax, cs
    224	019D  8E D8			     mov ds, ax
    225	019F  BA 0032r			     mov dx, offset allowStr
    226	01A2  E8 FFBF			     call Puts
    227
    228	01A5  C3			     ret
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 5
hack.asm



    229	01A6				     AllowAccess     endp
    230
    231	01A6			     .data
    232	002F  6D		     pLtr_5	     db	'm'
    233	0030  0292r				     dw	offset pLtr_6
    234
    235	0032  0D 0A		     allowStr db CR, LF
    236	0034  20 20 20 20 20 20	DB+	     db	'      лллл		лллл', CR, LF
    237	      DB DB DB 20 20 20	20+
    238	      20 20 20 20 20 20	20+
    239	      20 20 DB DB DB DB	0D+
    240	      0A
    241	0051  20 20 20 20 20 20	DB+	     db	'      л  л		л  л', CR, LF
    242	      20 20 DB 20 20 20	20+
    243	      20 20 20 20 20 20	20+
    244	      20 20 DB 20 20 DB	0D+
    245	      0A
    246	006E  20 20 20 20 20 20	DB+	     db	'      л  лллл	     лллл  л', CR, LF
    247	      20 20 DB DB DB DB	20+
    248	      20 20 20 20 20 20	DB+
    249	      DB DB DB 20 20 DB	0D+
    250	      0A
    251	008B  20 20 20 20 20 20	DB+	     db	'      л     л	     л	   л', CR, LF
    252	      20 20 20 20 20 DB	20+
    253	      20 20 20 20 20 20	DB+
    254	      20 20 20 20 20 DB	0D+
    255	      0A
    256	00A8  20 20 20 20 20 20	DB+	     db	'      л  л  ллллллллл	л  л', CR, LF
    257	      20 20 DB 20 20 DB	DB+
    258	      DB DB DB DB DB DB	DB+
    259	      20 20 DB 20 20 DB	0D+
    260	      0A
    261	00C5  20 20 20 20 20 20	DB+	     db	'      л  л   л	 л  л	л  л', CR, LF
    262	      20 20 DB 20 20 20	DB+
    263	      20 20 DB 20 20 DB	20+
    264	      20 20 DB 20 20 DB	0D+
    265	      0A
    266	00E2  20 20 20 20 20 20	DB+	     db	'      л  лл	       лл  л', CR, LF
    267	      20 20 DB DB 20 20	20+
    268	      20 20 20 20 20 20	20+
    269	      20 DB DB 20 20 DB	0D+
    270	      0A
    271	00FF  20 20 20 20 20 20	DB+	     db	'      л		   л', CR, LF
    272	      20 20 20 20 20 20	20+
    273	      20 20 20 20 20 20	20+
    274	      20 20 20 20 20 DB	0D+
    275	      0A
    276	011C  20 20 20 20 DB DB	DB+	     db	'    ллл		   ллл', CR, LF
    277	      20 20 20 20 20 20	20+
    278	      20 20 20 20 20 20	20+
    279	      20 20 20 20 20 DB	DB+
    280	      DB 0D 0A
    281	013B  20 20 20 20 DB 20	20+	     db	'    л	 ллллл	     ллллл   л', CR, LF
    282	      20 DB DB DB DB DB	20+
    283	      20 20 20 20 20 20	DB+
    284	      DB DB DB DB 20 20	20+
    285	      DB 0D 0A
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 6
hack.asm



    286	015A  20 20 20 20 DB 20	20+	     db	'    л	лл   лл	    лл	 лл  л', CR, LF
    287	      DB DB 20 20 20 DB	DB+
    288	      20 20 20 20 20 DB	DB+
    289	      20 20 20 DB DB 20	20+
    290	      DB 0D 0A
    291	0179  20 20 20 20 DB 20	20+	     db	'    л	 ллллл	     ллллл   л', CR, LF
    292	      20 DB DB DB DB DB	20+
    293	      20 20 20 20 20 20	DB+
    294	      DB DB DB DB 20 20	20+
    295	      DB 0D 0A
    296	0198  20 20 20 20 DB 20	20+	     db	'    л			     л', CR, LF
    297	      20 20 20 20 20 20	20+
    298	      20 20 20 20 20 20	20+
    299	      20 20 20 20 20 20	20+
    300	      DB 0D 0A
    301	01B7  20 DB DB DB DB DB	DB+	     db	' ллллллллл	ллл	ллллллллл', CR,	LF
    302	      DB DB DB 20 20 20	20+
    303	      20 DB DB DB 20 20	20+
    304	      20 20 DB DB DB DB	DB+
    305	      DB DB DB DB 0D 0A
    306	01D9  20 20 20 20 DB 20	20+	     db	'    л		 л	     л', CR, LF
    307	      20 20 20 20 20 20	20+
    308	      20 20 DB 20 20 20	20+
    309	      20 20 20 20 20 20	20+
    310	      DB 0D 0A
    311	01F8  DB DB DB DB DB DB	DB+	     db	'ллллллллл	 л	 ллллллллл', CR, LF
    312	      DB DB 20 20 20 20	20+
    313	      20 20 DB 20 20 20	20+
    314	      20 20 20 DB DB DB	DB+
    315	      DB DB DB DB DB 0D	0A
    316	021B  20 20 20 20 20 20	DB+	     db	'      л      л	 л  л	   л', CR, LF
    317	      20 20 20 20 20 20	DB+
    318	      20 20 DB 20 20 DB	20+
    319	      20 20 20 20 20 DB	0D+
    320	      0A
    321	0238  20 20 20 DB DB DB	DB+	     db	'   лллллллл   лл лл   лллллллл', CR, LF
    322	      DB DB DB DB 20 20	20+
    323	      DB DB 20 DB DB 20	20+
    324	      20 DB DB DB DB DB	DB+
    325	      DB DB 0D 0A
    326	0258  20 20 20 20 20 20	20+	     db	'	 л		 л', CR, LF
    327	      20 DB 20 20 20 20	20+
    328	      20 20 20 20 20 20	20+
    329	      20 20 20 DB 0D 0A
    330	0273  20 20 20 20 20 20	20+	     db	'	 ллллллллллллллллл', CR, LF
    331	      20 DB DB DB DB DB	DB+
    332	      DB DB DB DB DB DB	DB+
    333	      DB DB DB DB 0D 0A
    334	028E  24			     db	'$'
    335
    336
    337	028F  72		     pLtr_7	     db	'r'
    338	0290  0011r				     dw	offset pLtr_8
    339
    340
    341	0292			     .code
    342				     ; Represents a function that will be called
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 7
hack.asm



    343				     ; if passsword is incorrect, prints 'access denied'
    344				     ; Input:	     -
    345				     ; Output:	     In	console
    346				     ; Destroy:	     ax, dx, ds
    347	01A6			     DenyAccess	     proc
    348
    349	01A6  8C C8			     mov ax, cs
    350	01A8  8E D8			     mov ds, ax
    351	01AA  BA 0295r			     mov dx, offset denyStr
    352	01AD  E8 FFB4			     call Puts
    353
    354	01B0  C3			     ret
    355	01B1				     DenyAccess	     endp
    356
    357	01B1			     .data
    358	0292  75		     pLtr_6	     db	'u'
    359	0293  028Fr				     dw	offset pLtr_7
    360
    361	0295  0D 0A		     denyStr db	CR, LF
    362	0297  20 20 20 20 20 20	DB+	     db	'      лллл		лллл', CR, LF
    363	      DB DB DB 20 20 20	20+
    364	      20 20 20 20 20 20	20+
    365	      20 20 DB DB DB DB	0D+
    366	      0A
    367	02B4  20 20 20 20 20 20	DB+	     db	'      л  л		л  л', CR, LF
    368	      20 20 DB 20 20 20	20+
    369	      20 20 20 20 20 20	20+
    370	      20 20 DB 20 20 DB	0D+
    371	      0A
    372	02D1  20 20 20 20 20 20	DB+	     db	'      л  лллл	     лллл  л', CR, LF
    373	      20 20 DB DB DB DB	20+
    374	      20 20 20 20 20 20	DB+
    375	      DB DB DB 20 20 DB	0D+
    376	      0A
    377	02EE  20 20 20 20 20 20	DB+	     db	'      л     л	     л	   л', CR, LF
    378	      20 20 20 20 20 DB	20+
    379	      20 20 20 20 20 20	DB+
    380	      20 20 20 20 20 DB	0D+
    381	      0A
    382	030B  20 20 20 20 20 20	DB+	     db	'      л  л  ллллллллл	л  л', CR, LF
    383	      20 20 DB 20 20 DB	DB+
    384	      DB DB DB DB DB DB	DB+
    385	      20 20 DB 20 20 DB	0D+
    386	      0A
    387	0328  20 20 20 20 20 20	DB+	     db	'      л  л   л	 л  л	л  л', CR, LF
    388	      20 20 DB 20 20 20	DB+
    389	      20 20 DB 20 20 DB	20+
    390	      20 20 DB 20 20 DB	0D+
    391	      0A
    392	0345  20 20 20 20 20 20	DB+	     db	'      л  лл	       лл  л', CR, LF
    393	      20 20 DB DB 20 20	20+
    394	      20 20 20 20 20 20	20+
    395	      20 DB DB 20 20 DB	0D+
    396	      0A
    397	0362  20 20 20 20 20 20	DB+	     db	'      л		   л', CR, LF
    398	      20 20 20 20 20 20	20+
    399	      20 20 20 20 20 20	20+
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 8
hack.asm



    400	      20 20 20 20 20 DB	0D+
    401	      0A
    402	037F  20 20 20 20 DB DB	DB+	     db	'    ллл		   ллл', CR, LF
    403	      20 20 20 20 20 20	20+
    404	      20 20 20 20 20 20	20+
    405	      20 20 20 20 20 DB	DB+
    406	      DB 0D 0A
    407	039E  20 20 20 20 DB 20	20+	     db	'    л	 ллллл	     ллллл   л', CR, LF
    408	      20 DB DB DB DB DB	20+
    409	      20 20 20 20 20 20	DB+
    410	      DB DB DB DB 20 20	20+
    411	      DB 0D 0A
    412	03BD  20 20 20 20 DB 20	20+	     db	'    л	лл   лл	    лл	 лл  л', CR, LF
    413	      DB DB 20 20 20 DB	DB+
    414	      20 20 20 20 20 DB	DB+
    415	      20 20 20 DB DB 20	20+
    416	      DB 0D 0A
    417	03DC  20 20 20 20 DB 20	20+	     db	'    л	 ллллл	     ллллл   л', CR, LF
    418	      20 DB DB DB DB DB	20+
    419	      20 20 20 20 20 20	DB+
    420	      DB DB DB DB 20 20	20+
    421	      DB 0D 0A
    422	03FB  20 20 20 20 DB 20	20+	     db	'    л			     л', CR, LF
    423	      20 20 20 20 20 20	20+
    424	      20 20 20 20 20 20	20+
    425	      20 20 20 20 20 20	20+
    426	      DB 0D 0A
    427	041A  20 DB DB DB DB DB	DB+	     db	' ллллллллл	ллл	ллллллллл', CR,	LF
    428	      DB DB DB 20 20 20	20+
    429	      20 DB DB DB 20 20	20+
    430	      20 20 DB DB DB DB	DB+
    431	      DB DB DB DB 0D 0A
    432	043C  20 20 20 20 DB 20	20+	     db	'    л		 л	     л', CR, LF
    433	      20 20 20 20 20 20	20+
    434	      20 20 DB 20 20 20	20+
    435	      20 20 20 20 20 20	20+
    436	      DB 0D 0A
    437	045B  DB DB DB DB DB DB	DB+	     db	'ллллллллл	 л	 ллллллллл', CR, LF
    438	      DB DB 20 20 20 20	20+
    439	      20 20 DB 20 20 20	20+
    440	      20 20 20 DB DB DB	DB+
    441	      DB DB DB DB DB 0D	0A
    442	047E  20 20 20 20 20 20	DB+	     db	'      л	 л	   л', CR, LF
    443	      20 20 20 20 20 20	20+
    444	      20 20 DB 20 20 20	20+
    445	      20 20 20 20 20 DB	0D+
    446	      0A
    447	049B  20 20 20 DB DB DB	DB+	     db	'   лллллллл	л л    лллллллл', CR, LF
    448	      DB DB DB DB 20 20	20+
    449	      20 DB 20 DB 20 20	20+
    450	      20 DB DB DB DB DB	DB+
    451	      DB DB 0D 0A
    452	04BB  20 20 20 20 20 20	20+	     db	'	 л     л   л	 л', CR, LF
    453	      20 DB 20 20 20 20	20+
    454	      DB 20 20 20 DB 20	20+
    455	      20 20 20 DB 0D 0A
    456	04D6  20 20 20 20 20 20	20+	     db	'	 ллллллллллллллллл', CR, LF
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 9
hack.asm



    457	      20 DB DB DB DB DB	DB+
    458	      DB DB DB DB DB DB	DB+
    459	      DB DB DB DB 0D 0A
    460	04F1  24			     db	'$'
    461
    462
    463				     end Start
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "04/14/20"
??FILENAME			  Text	 "hack	  "
??TIME				  Text	 "23:48:13"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALCULATE_LOOP		  Near	 DGROUP:0173
@@CALCULATE_LOOP		  Near	 DGROUP:018B
@@CORRECT			  Near	 DGROUP:0133
@@END_CALCULATE_LOOP		  Near	 DGROUP:0185
@@END_CALCULATE_LOOP		  Near	 DGROUP:019A
@@END_IF_CORRECT		  Near	 DGROUP:0143
@@IF_NOT_CORRECT		  Near	 DGROUP:0140
@@INPUT_LOOP			  Near	 DGROUP:0148
@@NOOVERFLOW			  Near	 DGROUP:0160
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 HACK
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALLOWACCESS			  Near	 DGROUP:019B
ALLOWSTR			  Byte	 DGROUP:0032
ASKPASSWORD			  Byte	 DGROUP:0003
CALCBUFHASH			  Near	 DGROUP:0186
CALCLISTHASH			  Near	 DGROUP:016E
CHAR_INPUT			  Number 0008
CR				  Number 000D
DENYACCESS			  Near	 DGROUP:01A6
DENYSTR				  Byte	 DGROUP:0295
GETS				  Near	 DGROUP:0148
HASHFORMULA			  Near	 DGROUP:0169
INPUT_LENGTH			  Number 0014
LF				  Number 000A
PASSWORDCORRECT			  Byte	 DGROUP:002E
PLTR_1				  Byte	 DGROUP:000E
PLTR_2				  Byte	 DGROUP:0000
PLTR_3				  Byte	 DGROUP:0028
PLTR_4				  Byte	 DGROUP:002B
PLTR_5				  Byte	 DGROUP:002F
PLTR_6				  Byte	 DGROUP:0292
PLTR_7				  Byte	 DGROUP:028F
PLTR_8				  Byte	 DGROUP:0011
PUTS				  Near	 DGROUP:0164
START				  Near	 DGROUP:0100
STRING_OUTPUT			  Number 0009
USRINPUT			  Byte	 DGROUP:0014
Turbo Assembler	 Version 4.1	    04/14/20 23:48:13	    Page 11
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  04F2 Word	  Public  DATA
  _TEXT				  16  01B1 Word	  Public  CODE
