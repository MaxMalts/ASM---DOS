Turbo Assembler	 Version 4.1	    03/15/20 19:18:30	    Page 1
keyb_int.asm



      1				     ; This program waits for hotkeys and sorts	everything on the screen
      2				     ; when they are pressed
      3
      4				     locals @@
      5
      6	0000			     .model tiny
      7
      8				     extrn Bubble_Sort:	near
      9
     10	0000			     .data
     11	0000  00		     hotkeysPressed db 0
     12	0001  11*(00)		     oldPalette	db 17 dup (0)
     13	0012  00 10 10 12 10 10	02+  matrixPalette   db	0, 00010000B, 00010000B, 00010010B, \
     14	      12 10 12 12 12 10	12+		     00010000B,	00010000B, 00000010B, 00010010B, 00010000B, \
     15	      12 12 00				     00010010B,	00010010B, 00010010B, 00010000B, 00010010B, \
     16						     00010010B,	00010010B, 0 \
     17	0023			     .code
     18				     org 100H
     19
     20	0100			     Start:
     21	      =B800			     VIDEO_SEGMENT   equ 0b800H
     22	      =0050			     SCREEN_WIDTH    equ 80D
     23	      =0019			     SCREEN_HEIGHT   equ 25D
     24	      =0060			     KEYB_PORT	     equ 60H
     25	      =0024			     KEYB_INTER	     equ 9*4
     26	      =00EA			     JMPFAR_COMMAND  equ 0eaH
     27
     28	0100  FA			     cli
     29	0101  B8 0000			     mov ax, 0
     30	0104  8E C0			     mov es, ax
     31
     32	0106  BB 0024			     mov bx, KEYB_INTER
     33	0109  26: 8B 07			     mov ax, word ptr es:[bx]
     34	010C  A3 016Cr			     mov OldInter, ax
     35	010F  26: 8B 47	02		     mov ax, word ptr es:[bx+2]
     36	0113  A3 016Er			     mov OldInter+2, ax
     37
     38
     39	0116  26: C7 07	0128r		     mov word ptr es:[bx], offset New09Interrupt
     40	011B  26: 8C 4F	02		     mov word ptr es:[bx+2], cs
     41	011F  FB			     sti
     42
     43	0120  B8 3100			     mov ax, 3100H   ; Exit program but	don't unload it	from RAM
     44	0123  BA 0258			     mov dx, 258H
     45	0126  CD 21			     int 21H
     46
     47
     48	0128				     New09Interrupt proc
     49	      =002A				     HOT_KEY_1	     equ 2aH ; left shift
     50	      =0039				     HOT_KEY_2	     equ 39H ; space
     51
     52
     53	0128  50 53 51 52 06 57	1E		     push ax bx	cx dx es di ds
     54
     55	012F  8C C8				     mov ax, cs
     56	0131  8E D8				     mov ds, ax
     57
Turbo Assembler	 Version 4.1	    03/15/20 19:18:30	    Page 2
keyb_int.asm



     58	0133  B7 2A				     mov bh, HOT_KEY_1
     59	0135  B3 39				     mov bl, HOT_KEY_2
     60	0137  E8 0037				     call Handle_Hotkeys
     61
     62	013A  80 3E 0000r C0			     cmp hotkeysPressed, 11000000B
     63	013F  75 23				     jne @@end_if_hotkeysPressed
     64	0141  8C C8					     mov ax, cs		     ; Saving palette
     65	0143  8E C0					     mov es, ax
     66	0145  B8 1009					     mov ax, 1009H
     67	0148  BA 0001r					     mov dx, offset oldPalette
     68	014B  CD 10					     int 10H
     69
     70	014D  B8 1002					     mov ax, 1002H	     ; Setting matrix palette
     71	0150  BA 0012r					     mov dx, offset matrixPalette
     72	0153  CD 10					     int 10H
     73
     74	0155  E8 0051					     call SortColumns
     75
     76	0158  8C C8					     mov ax, cs		     ; Reseting	palette
     77	015A  8E C0					     mov es, ax
     78	015C  B8 1002					     mov ax, 1002H
     79	015F  BA 0001r					     mov dx, offset oldPalette
     80	0162  CD 10					     int 10H
     81	0164					     @@end_if_hotkeysPressed:
     82
     83	0164  1F 5F 07 5A 59 5B	58		     pop ds di es dx cx	bx ax
     84
     85						     ; Jump to old interrupt handler:
     86	016B  EA					     db	JMPFAR_COMMAND
     87	016C  0000			     OldInter	     dw	0    ; jmp arguments
     88	016E  0000					     dw	0
     89
     90	0170  CF				     iret
     91	0171					     New09Interrupt endp
     92
     93
     94					     ; Handles hotkeys
     95					     ; Input:	     bl	- first	key
     96					     ;		     bh	- second key
     97					     ; Output:	     (var) hotkeysPressed - if i-th bit	is 1 (0)
     98					     ;		     then the i-th key is pressed (not pressed)
     99					     ; Destroy:	     ax
    100	0171				     Handle_Hotkeys proc
    101	0171  E4 60				     in	al, KEYB_PORT
    102	0173  3A C7				     cmp al, bh
    103	0175  74 11				     je	@@First_pressed
    104
    105	0177  3A C3				     cmp al, bl
    106	0179  74 15				     je	@@Second_pressed
    107
    108	017B  2C 80				     sub al, 80H
    109	017D  3A C7				     cmp al, bh
    110	017F  74 17				     je	@@First_released
    111
    112	0181  3A C3				     cmp al, bl
    113	0183  74 1B				     je	@@Second_released
    114	0185  EB 21 90				     jmp @@end_switch
Turbo Assembler	 Version 4.1	    03/15/20 19:18:30	    Page 3
keyb_int.asm



    115
    116
    117	0188					     @@First_pressed:
    118	0188  80 0E 0000r 80				     or	hotkeysPressed,	10000000B
    119	018D  EB 19 90					     jmp @@end_switch
    120
    121	0190					     @@Second_pressed:
    122	0190  80 0E 0000r 40				     or	hotkeysPressed,	01000000B
    123	0195  EB 11 90					     jmp @@end_switch
    124
    125	0198					     @@First_released:
    126	0198  80 26 0000r 7F				     and hotkeysPressed, 01111111B
    127	019D  EB 09 90					     jmp @@end_switch
    128
    129	01A0					     @@Second_released:
    130	01A0  80 26 0000r BF				     and hotkeysPressed, 10111111B
    131	01A5  EB 01 90					     jmp @@end_switch
    132	01A8					     @@end_switch:
    133
    134	01A8  C3				     ret
    135	01A9					     Handle_Hotkeys endp
    136
    137					     ; Sorts the columns of the	screen
    138					     ; Input:	     -
    139					     ; Output:	     -
    140					     ; Destroy:	     ax, cx, es, di
    141	01A9				     SortColumns proc
    142	01A9  B8 B800				     mov ax, VIDEO_SEGMENT
    143	01AC  8E C0				     mov es, ax
    144
    145	01AE  BF 0000				     mov di, 0	     ; Current column
    146	01B1  B9 0050				     mov cx, SCREEN_WIDTH
    147	01B4					     @@Column_loop:
    148	01B4  51					     push cx
    149	01B5  B9 0F00					     mov cx, (SCREEN_HEIGHT-1)*SCREEN_WIDTH*2
    150	01B8  E8 0000e					     call Bubble_Sort
    151	01BB  59					     pop cx
    152
    153	01BC  83 C7 02					     add di, 2
    154	01BF  E2 F3					     loop @@Column_loop
    155
    156	01C1  C3				     ret
    157	01C2					     SortColumns endp
    158				     end Start
Turbo Assembler	 Version 4.1	    03/15/20 19:18:30	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/15/20"
??FILENAME			  Text	 "keyb_int"
??TIME				  Text	 "19:18:30"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@COLUMN_LOOP			  Near	 DGROUP:01B4
@@END_IF_HOTKEYSPRESSED		  Near	 DGROUP:0164
@@END_SWITCH			  Near	 DGROUP:01A8
@@FIRST_PRESSED			  Near	 DGROUP:0188
@@FIRST_RELEASED		  Near	 DGROUP:0198
@@SECOND_PRESSED		  Near	 DGROUP:0190
@@SECOND_RELEASED		  Near	 DGROUP:01A0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 KEYB_INT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUBBLE_SORT			  Near	 ----:---- Extern
HANDLE_HOTKEYS			  Near	 DGROUP:0171
HOTKEYSPRESSED			  Byte	 DGROUP:0000
HOT_KEY_1			  Number 002A
HOT_KEY_2			  Number 0039
JMPFAR_COMMAND			  Number 00EA
KEYB_INTER			  Number 0024
KEYB_PORT			  Number 0060
MATRIXPALETTE			  Byte	 DGROUP:0012
NEW09INTERRUPT			  Near	 DGROUP:0128
OLDINTER			  Word	 DGROUP:016C
OLDPALETTE			  Byte	 DGROUP:0001
SCREEN_HEIGHT			  Number 0019
SCREEN_WIDTH			  Number 0050
SORTCOLUMNS			  Near	 DGROUP:01A9
START				  Near	 DGROUP:0100
VIDEO_SEGMENT			  Number B800

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0023 Word	  Public  DATA
  _TEXT				  16  01C2 Word	  Public  CODE
